{"name":"Angular-block-ui","tagline":"AngularJS Block UI Module","body":"angular-block-ui\r\n============\r\nA simple AngularJS module that allows you to block user interaction on AJAX requests. \r\n\r\n#### Dependencies\r\nBesides AngularJS (~1.2.4), none.  \r\n\r\n#### Usage\r\nThe blockUI module exposes a service by the same name. Access to the service is gained by injecting it into your controller or directive:\r\n\r\n    angular.module('myApp').controller('MyController', function($scope, blockUI) {\r\n      // A function called from user interface, which performs an async operation.\r\n      $scope.onSave = function(item) {\r\n    \r\n        // Block the user interface\r\n        blockUI.start();\r\n\r\n        // Perform the async operation    \r\n        item.$save(function() {\r\n      \r\n          // Unblock the user interface\r\n          blockUI.stop();\r\n          \r\n        });\r\n      };\r\n    });\r\n\r\nBlockUI service methods\r\n=======================\r\n\r\n#### start\r\nThe start method will start the user interface block. Because multiple user interface elements can request a user interface block at the same time, the service keeps track of the number of start calls. Each call to start() will increase the count and every call to stop() will decrease the value. Whenever the count reaches 0 the block will end.\r\n\r\n*Note: By default the block is immediately active after calling this method, but to prevent trashing the user interface everytime a button is pressed, the block is visible after a short delay. This behaviour can be modified in the configuration.*\r\n\r\n**Arguments:**\r\n\r\n* **message** (string)\r\nIndicates the message to be shown in the overlay. If none is provided, the default message from the configuration is used.\r\n\r\n#### stop\r\nThis will decrease the block count. The block will end if the count is 0.\r\n\r\n#### reset\r\nThe reset will force a unblock by setting the block count to 0.\r\n\r\n#### message\r\nAllows the message shown in the overlay to be updated while to block is active.\r\n\r\nBlockUI overlay template\r\n========================\r\n\r\nThe html and styling of the builtin template is kept barebone. It consist of two divs (overlay and message):\r\n\r\n    <div ng-show=\"blockCount > 0\" class=\"block-ui-overlay\" ng-class=\"{ 'block-ui-visible': blocking }\"></div>\r\n    <div ng-show=\"blocking\" class=\"block-ui-message\">{{ message }}</div>\r\n\r\nA custom template can be specified in the module configuration.\r\n\r\nBlockUI module configuration\r\n============================\r\n\r\nThe configuration of the BlockUI module can be modified via the **blockUIConfigProvider** during the config phase of your Angular application:\r\n\r\n    angular.module('myApp').config(function(blockUIConfigProvider) {\r\n      \r\n      // Change the default overlay message\r\n      blockUIConfigProvider.message('Please stop clicking!');\r\n      \r\n      // Change the default delay to 100ms before the blocking is visible\r\n      blockUIConfigProvider.delay(100);\r\n      \r\n    });\r\n\r\n### Methods\r\n\r\n#### message\r\nChanges the default message to be used when no message has been provided to the *start* method of the service. Default value is *'Loading ...'*.\r\n\r\n    // Change the default overlay message\r\n    blockUIConfigProvider.message('Please wait');\r\n\r\n#### delay\r\nSpecifies the amount in milliseconds before the block is visible to the user. By delaying a visible block your application will appear more responsive. The default value is *500*.\r\n\r\n    // Change the default delay to 100ms before the blocking is visible\r\n    blockUIConfigProvider.delay(100);\r\n\r\n#### template\r\nSpecifies a custom template to use as the overlay.\r\n\r\n    // Provide a custom template to use\r\n    blockUIConfigProvider.template('<div class=\"block-ui-overlay\">{{ message }}</div>');\r\n\r\n#### templateUrl\r\nSpecifies a url to retrieve the template from. *The current release only works with pre-cached templates, which means that this url should be known in the $templateCache service of Angular. If you're using the grunt with html2js or angular-templates, which I highly recommend, you're already set.*\r\n\r\n    // Provide the custom template via a url\r\n    blockUIConfigProvider.templateUrl('my-templates/block-ui-overlay.html');\r\n\r\n#### onLocationChange\r\nBy default the BlockUI module will start a block whenever a *$locationChangeStart* event is fired. You can set this value to *false* if you don't want this behaviour.\r\n\r\n    // Disable blocking on location change\r\n    blockUIConfigProvider.onLocationChange(false);\r\n\r\n#### resetOnException\r\nBy default the BlockUI module will reset the block count and hide the overlay whenever an exception has occured. You can set this value to *false* if you don't want this behaviour.\r\n\r\n    // Disable clearing block whenever an exception has occured\r\n    blockUIConfigProvider.resetOnException(false);","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}